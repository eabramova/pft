package com.example.tests;

import java.util.regex.Pattern;
import java.util.concurrent.TimeUnit;
//import org.junit.*;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.*;
import org.openqa.selenium.*;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.Select;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

public class AddContactTests {
  private WebDriver driver;
  private String baseUrl;
  private boolean acceptNextAlert = true;
  private StringBuffer verificationErrors = new StringBuffer();

  @BeforeClass
  public void setUp() throws Exception {
    driver = new FirefoxDriver();
    baseUrl = "http://localhost/";
    driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
  }

  @Test
  public void testNonEmptyContactCreation() throws Exception {
	openMainPage();
    initAddNewContact();
    ContactData contact = new ContactData();	
    contact.firstname = "John";
    contact.lastname = "Doe";
    contact.address = "3590 Marquette St, 95051 Santa Clara, Ca";
    contact.homephone = "+1-650-34-5678";
    contact.mobilephone = "+1-980-45-5678";
    contact.workphone = "+1-340-58-2345";
    contact.email = "john.doe.@gmail.com";
    contact.email2 = "john.doe2@gmail.com";
    contact.address2 = "3591 Market St, 98567 San Francisco, Ca";
    contact.phone2 = "+1-234-34-4567";
    //group.contact.selectedgroup = "grou name 1";
    //contact.selectedbday = "10";
    //contact.selectedbmonth = "April";
    //contact.byear = "1986";    
	fillNewContactPage(contact);
	
	ContactGroupData group = new ContactGroupData();
	group.selectedgroup = "grou name 1";
	selectGroup(group);
	
	BirthDateData bdata = new BirthDateData();
	bdata.selectedbday = "20";
	bdata.selectedbmonth = "March";
	bdata.byear = "1981";
	
    submitAddNewContact();
    returnMainPageFromAddNewContactPage();
  }
  
  @Test
  public void testEmptyContactCreation() throws Exception {
	openMainPage();
    initAddNewContact();
    ContactData contact = new ContactData("", "", "", "", "", "", "", "", "", "");    
	fillNewContactPage(contact);
    submitAddNewContact();
    returnMainPageFromAddNewContactPage();
  }
  

private void returnMainPageFromAddNewContactPage() {
	//return to main page
    driver.findElement(By.linkText("home page")).click();
}

private void submitAddNewContact() {
	//submit add new contact form creation
    driver.findElement(By.name("submit")).click();
}

private void fillNewContactPage(ContactData contact) {
	// fill add new address book entry form
    driver.findElement(By.name("firstname")).clear();
    driver.findElement(By.name("firstname")).sendKeys(contact.firstname);
    driver.findElement(By.name("lastname")).clear();
    driver.findElement(By.name("lastname")).sendKeys(contact.lastname);
    driver.findElement(By.name("address")).clear();
    driver.findElement(By.name("address")).sendKeys(contact.address);
    driver.findElement(By.name("home")).clear();
    driver.findElement(By.name("home")).sendKeys(contact.homephone);
    driver.findElement(By.name("mobile")).clear();
    driver.findElement(By.name("mobile")).sendKeys(contact.mobilephone);
    driver.findElement(By.name("work")).clear();
    driver.findElement(By.name("work")).sendKeys(contact.workphone);
    driver.findElement(By.name("email")).clear();
    driver.findElement(By.name("email")).sendKeys(contact.email);
    driver.findElement(By.name("email2")).clear();
    driver.findElement(By.name("email2")).sendKeys(contact.email2);
    //bDateSelect(contact);
    //driver.findElement(By.name("byear")).clear();
    //driver.findElement(By.name("byear")).sendKeys(bdate.byear);
   // selectGroup(contact);
    driver.findElement(By.name("address2")).clear();
    driver.findElement(By.name("address2")).sendKeys(contact.address2);
    driver.findElement(By.name("phone2")).clear();
    driver.findElement(By.name("phone2")).sendKeys(contact.phone2);
}

private void selectGroup(ContactGroupData group) {
	new Select(driver.findElement(By.name("new_group"))).selectByVisibleText(group.selectedgroup);
}

private void bDateSelect(BirthDateData parameterObject) {
	new Select(driver.findElement(By.name("bday"))).selectByVisibleText(parameterObject.selectedbday);
    new Select(driver.findElement(By.name("bmonth"))).selectByVisibleText(parameterObject.selectedbmonth);
    driver.findElement(By.name("byear")).clear();
    driver.findElement(By.name("byear")).sendKeys(bdate.byear);
    
}

private void initAddNewContact() {
	// go to add new address book entry
    driver.findElement(By.linkText("add new")).click();
}

private void openMainPage() {
	//open main page
    driver.get(baseUrl + "/addressbookv4.1.4/");
}

  @AfterClass
  public void tearDown() throws Exception {
    driver.quit();
    String verificationErrorString = verificationErrors.toString();
    if (!"".equals(verificationErrorString)) {
      fail(verificationErrorString);
    }
  }

  private boolean isElementPresent(By by) {
    try {
      driver.findElement(by);
      return true;
    } catch (NoSuchElementException e) {
      return false;
    }
  }

  private boolean isAlertPresent() {
    try {
      driver.switchTo().alert();
      return true;
    } catch (NoAlertPresentException e) {
      return false;
    }
  }

  private String closeAlertAndGetItsText() {
    try {
      Alert alert = driver.switchTo().alert();
      String alertText = alert.getText();
      if (acceptNextAlert) {
        alert.accept();
      } else {
        alert.dismiss();
      }
      return alertText;
    } finally {
      acceptNextAlert = true;
    }
  }
}
